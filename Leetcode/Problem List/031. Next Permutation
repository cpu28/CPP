Questionm:

class Solution {
public:
    void nextPermutation(vector<int>& nums) 
    {
        int n = nums.size();
        int i = n - 2;

        // Find the first element that is smaller than its next element
        while (i >= 0 && nums[i] >= nums[i + 1]) 
        {
            i--;
        }

        if (i >= 0) 
        {
            int j = n - 1;
            // Find the smallest element to the right of nums[i] that is greater than nums[i]
            while (j >= 0 && nums[j] <= nums[i]) 
            {
                j--;
            }

            // Swap nums[i] with the smallest greater element to its right
            swap(nums[i], nums[j]);
        }

        // Reverse the elements to the right of i
        reverse(nums.begin() + i + 1, nums.end());
    }
};






Solution:

class Solution {
public:
    void nextPermutation(vector<int>& nums) 
    {
        int n = nums.size();
        int i = n - 2;

        // Find the first element that is smaller than its next element
        while (i >= 0 && nums[i] >= nums[i + 1]) 
        {
            i--;
        }

        if (i >= 0) 
        {
            int j = n - 1;
            // Find the smallest element to the right of nums[i] that is greater than nums[i]
            while (j >= 0 && nums[j] <= nums[i]) 
            {
                j--;
            }

            // Swap nums[i] with the smallest greater element to its right
            swap(nums[i], nums[j]);
        }

        // Reverse the elements to the right of i
        reverse(nums.begin() + i + 1, nums.end());
    }
};
