Question:

Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

 

Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
 

Constraints:

-100.0 < x < 100.0
-231 <= n <= 231-1
n is an integer.
Either x is not zero or n > 0.
-104 <= xn <= 104





Solution:

class Solution {
public:
    double myPow(double x, int n) 
    {
        // Base cases:
        if(n==0) {return 1;}
        else if (n==1){return x;}
        else if(n==-1){return 1/x;}

        // Check if the exponent is negative and handle accordingly:
        int inv=0;
        if(n<0)
        {
            inv=1;
            n=abs(n);
        }

        // Exponentiation by squaring:
        double result=1.0;
        while(n>0)
        {
            // If the current bit is 1, multiply the result by x:
            if(n%2==1)
            {
                result*=x;
            }
            // Square the base x for the next iteration:
            x*=x;
            // Right-shift the exponent n by 1:
            n/=2;
        }
        
        // If the original exponent was negative, invert the result:
        if(inv==1)
        {
            result=1/result;
        }

        return result;

    }
};
