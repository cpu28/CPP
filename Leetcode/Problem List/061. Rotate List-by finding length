Question:

Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109







Solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) 
    {
        ListNode* NodeK=head;     //Kth Node
        ListNode* tail=head;
        //for nullptr i.e, no element in list or single element in list or invalid k;
        if(head==nullptr||tail->next==nullptr ||k<=0) 
        {
            return head;
        }
        int length=1;
        while(tail->next!=nullptr) //calculating length of list
        {
            tail=tail->next;
            length++;
        }
        k=k%length; //calculating effective k value
        if(k==0){return head;} //for k==length

        for(int i=1;i<length-k;i++)
        {
            NodeK=NodeK->next;
        }

        ListNode *temp=NodeK->next; //head of second part
        NodeK->next=nullptr;
        tail->next=head;
        head=temp;

        return head;

    }
};
