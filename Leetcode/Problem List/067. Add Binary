Question:

Given two binary strings a and b, return their sum as a binary string.

 

Example 1:

Input: a = "11", b = "1"
Output: "100"
Example 2:

Input: a = "1010", b = "1011"
Output: "10101"
 

Constraints:

1 <= a.length, b.length <= 104
a and b consist only of '0' or '1' characters.
Each string does not contain leading zeros except for the zero itself.



solution:

#include <string>

class Solution {
public:
    // Function to add two binary strings and return the sum
    std::string addBinary(std::string a, std::string b) {
        std::string result = ""; // Variable to store the final binary sum
        int carry = 0; // Variable to store the carry
        int i = a.length() - 1; // Index for string a
        int j = b.length() - 1; // Index for string b

        // Iterate through the strings a and b from right to left
        while (i >= 0 || j >= 0) {
            // Get the current digits from strings a and b
            int x = (i >= 0) ? a[i] - '0' : 0;
            int y = (j >= 0) ? b[j] - '0' : 0;

            // Compute the sum of the digits and the carry
            int sum = x + y + carry;

            // Append the remainder of the sum to the result (current digit)
            result = std::to_string(sum % 2) + result;

            // Update the carry for the next iteration
            carry = sum / 2;

            // Move to the next digit in strings a and b
            i--;
            j--;
        }

        // If there is a remaining carry, append it to the result
        if (carry == 1) {
            result = '1' + result;
        }

        // Return the final binary sum
        return result;
    }
};
