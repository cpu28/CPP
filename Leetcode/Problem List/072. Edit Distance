Question:

Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
 

Constraints:

0 <= word1.length, word2.length <= 500
word1 and word2 consist of lowercase English letters.





Solution:

class Solution {
public:
    int minDistance(string word1, string word2) 
    {
        int m=word1.size();
        int n=word2.size();

        int a[m+1][n+1];
        a[0][0]=0;
        for(int i=0;i<=m;i++)
        {
            for(int j=0;j<=n;j++)
            {
                if(i==0||j==0)
                {
                    a[i][j]=max(i,j);
                }
                else
                {
                    if(word1[i-1]==word2[j-1])
                    {
                        a[i][j]=a[i-1][j-1];
                    }
                    else
                    {
                        a[i][j]=min(min(a[i-1][j-1], a[i-1][j]), a[i][j-1])+1; //min function takes onLy two arguments. so, using nested min.
                    }
                }
            }
        } 

        return a[m][n];  
    }
};
