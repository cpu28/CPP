Question:

Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

 

Example 1:


Input: head = [1,1,2]
Output: [1,2]
Example 2:


Input: head = [1,1,2,3,3]
Output: [1,2,3]
 

Constraints:

The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.





Solution:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) 
    {
        if(head==nullptr||head->next==nullptr){return head;}

        ListNode* first=head;
        ListNode* second=head->next;
        while(second!=nullptr)
        {
            if(first->val!=second->val)
            {
                first=first->next;
                second=second->next;
            }
            else
            {
                if (second->next!=nullptr)
                {
                    ListNode* temp=second->next;
                    second->next=nullptr;
                    first->next=temp;
                    //first=first->next;
                    delete second;
                    second=first->next;
                }
                else
                {
                    first->next=nullptr;
                    second=nullptr;
                }
            }
        }

        return head;

    }
};
