Question:

Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]
Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]
 

Constraints:

The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n
 

Follow up: Could you do it in one pass?

solution:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
ListNode* reverseBetween(ListNode* head, int left, int right) {
    if (head == nullptr || left == right) {
        return head;
    }

    ListNode* curr = head;
    ListNode* prev = nullptr;
    int count = 1;
    ListNode* leftNode;
    ListNode* leftNodeNext;
    ListNode* rightNode;
    ListNode* rightNodeNext;

    while (count < left) {
        prev = curr;
        curr = curr->next;
        count++;
    }

    leftNode = prev;
    leftNodeNext = curr;

    while (count <= right) {
        ListNode* next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
        count++;
    }

    rightNode = prev;
    rightNodeNext = curr;

    // Connect the reversed sublist back to the original list
    if (leftNode != nullptr) {
        leftNode->next = rightNode;
    } else {
        // Special case when reversing starts from the head of the list
        head = rightNode;
    }

    // Connect the rest of the list to the end of the reversed sublist
    leftNodeNext->next = rightNodeNext;

    return head;
}



}; 
