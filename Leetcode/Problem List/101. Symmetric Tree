Question:

Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

 

Example 1:


Input: root = [1,2,2,3,4,4,3]
Output: true
Example 2:


Input: root = [1,2,2,null,3,null,3]
Output: false
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
-100 <= Node.val <= 100
 

Follow up: Could you solve it both recursively and iteratively?





Solution:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool ismirror(TreeNode* l, TreeNode* r) //fun. to check mirror or not
    {
        if (l==nullptr && r==nullptr) {return true;} //both null=>mirror
        else if(l==nullptr||r==nullptr) {return false;}//only one null=>not mirror
        else //both not null
        {
            if(l->val!=r->val){return false;} // if values doesn't match then its not not a mirror, else move to next level and check mirror or not for two conditions 
            //1) left->left, right->right
            //2) left->right, right->left
            //now if above both are true then its mirror else not a mirror.
            return ismirror(l->left,r->right)&&ismirror(l->right, r->left);
        }
    }
    bool isSymmetric(TreeNode* root) 
    {
        if(root==nullptr) {return true;}

        bool ans=ismirror(root->left,root->right);
        return ans;
    }
};
