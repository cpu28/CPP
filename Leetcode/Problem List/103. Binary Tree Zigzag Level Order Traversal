Question:

Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-100 <= Node.val <= 100








Solution:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> reverse_order(vector<int> & v)
    {
        int n=v.size();
        for(int i=0;i<n/2;i++)
        {
            swap(v[i],v[n-1-i]);
        }

        return v;
    }
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) 
    {
        vector<vector<int>> result;
        queue<TreeNode*> q;
        bool reverse=false;
        if(root==nullptr){return result;}
        else
        {
            q.push(root);
        }
        while(!q.empty())
        {
            vector<int> subResult;
            int n=q.size();
            while(n>0)
            {
                TreeNode* temp=q.front();
                q.pop();
                subResult.push_back(temp->val);
                if(temp->left){q.push(temp->left);}
                if(temp->right){q.push(temp->right);}
                n--;
            }
            if(reverse==false)
            {
                result.push_back(subResult);
                reverse=true;
            }
            else
            {
                vector<int> subRes=reverse_order(subResult);
                result.push_back(subRes);
                reverse=false;
            }

        }

        return result;
    }
};
