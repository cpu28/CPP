Question:

Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.

 

Example 1:


Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]
Example 2:

Input: preorder = [-1], inorder = [-1]
Output: [-1]
 

Constraints:

1 <= preorder.length <= 3000
inorder.length == preorder.length
-3000 <= preorder[i], inorder[i] <= 3000
preorder and inorder consist of unique values.
Each value of inorder also appears in preorder.
preorder is guaranteed to be the preorder traversal of the tree.
inorder is guaranteed to be the inorder traversal of the tree.





Solution:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTreeHelper(vector<int>& preorder, vector<int>& inorder, int inS,int inE, int preS, int preE)
    {
        // Base case: If the inorder start is greater than the inorder end, return NULL
        if(inS>inE)
        {
            return NULL;
        }

        // The root of the current subtree is the first element of the preorder traversal
        int rootData=preorder[preS];

        // Find the index of the root in the inorder traversal
        int rootIndex=-1;
        for(int i=inS;i<=inE;i++)
        {
            if(inorder[i]==rootData)
            {
                rootIndex=i;
                break;
            }
        }


        // Calculate indices for left subtree in both inorder and preorder traversals
        int leftInS=inS;
        int leftInE=rootIndex-1;
        int leftPreS=preS+1;
        int leftPreE=leftPreS+leftInE-leftInS;

        // Calculate indices for right subtree in both inorder and preorder traversals
        int rightInS=rootIndex+1;
        int rightInE=inE;
        int rightPreS=leftPreE+1;
        int rightPreE=preE;

        // Create a new TreeNode for the root of the current subtree
        TreeNode* root=new TreeNode(rootData);
        
        // Recursively build the left subtree and assign it to the left pointer of the root
        root->left=buildTreeHelper(preorder, inorder, leftInS, leftInE, leftPreS, leftPreE);
        
        // Recursively build the right subtree and assign it to the right pointer of the root
        root->right=buildTreeHelper(preorder, inorder, rightInS, rightInE, rightPreS, rightPreE);

        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) 
    {
        int n=inorder.size();
        
        // Call the helper function to build the binary tree and return the root
        return buildTreeHelper(preorder, inorder, 0, n-1, 0, n-1);
    }
};
