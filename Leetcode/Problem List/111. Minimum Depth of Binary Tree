Question:

Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: 2
Example 2:

Input: root = [2,null,3,null,4,null,5,null,6]
Output: 5
 

Constraints:

The number of nodes in the tree is in the range [0, 105].
-1000 <= Node.val <= 1000






Solution:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) 
    {
        if (root == nullptr) 
        {
            return 0; // Base case: empty tree has a depth of 0.
        }

        int leftDepth = minDepth(root->left);
        int rightDepth = minDepth(root->right);

        // If either left or right child is nullptr, we take the non-null child's depth.
        // Otherwise, we take the minimum of left and right child depths.
        if (leftDepth == 0 || rightDepth == 0) 
        {
            return leftDepth + rightDepth + 1;
        }
        else
        {
            return min(leftDepth, rightDepth)+1;
        }
    }
};
