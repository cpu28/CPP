Question:

Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: rowIndex = 3
Output: [1,3,3,1]
Example 2:

Input: rowIndex = 0
Output: [1]
Example 3:

Input: rowIndex = 1
Output: [1,1]
 

Constraints:

0 <= rowIndex <= 33
 

Follow up: Could you optimize your algorithm to use only O(rowIndex) extra space?





Solution:

class Solution {
public:
    vector<int> getRow(int rowIndex) 
    {
        vector<vector<int>> result; //to store Pascal's triangle.
        int i=0;
        while(i<=rowIndex)
        {
            vector<int> subres;   // to store current row of Pascal's triangle.
            for(int j=0;j<=i;j++)
            {
                if(j==0||j==i)
                {
                    //since,first & last elements of each row are 1.
                    subres.push_back(1);
                }
                else
                {
                    // The elements in the middle of each row are the sum of two 
                    // elements from the previous row in Pascal's triangle
                    subres.push_back(result[i-1][j-1]+result[i-1][j]);
                }
            }
            result.push_back(subres); //push the row into result
            i++;
        }

        return result[rowIndex];
    }
};
