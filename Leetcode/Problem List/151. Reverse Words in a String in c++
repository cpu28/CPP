Question:

Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.

 

Example 1:

Input: s = "the sky is blue"
Output: "blue is sky the"
Example 2:

Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.
Example 3:

Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.
 

Constraints:

1 <= s.length <= 104
s contains English letters (upper-case and lower-case), digits, and spaces ' '.
There is at least one word in s.
 

Follow-up: If the string data type is mutable in your language, can you solve it in-place with O(1) extra space?

Solution:

class Solution {
public:
    string reverseWords(string s) 
    {
        stack <string> words_stack;
        string word="";
        for (int i=0;i<s.size();i++)
        {
            
            //to add word and " " into stack
            if(s[i]==' ')
            {
                if(!word.empty())  //to avoid spaces at beginning, double spaces.
                {
                    words_stack.push(word);
                    words_stack.push(" ");
                    word="";
                }
            }
            // to get word from sentence
            else
            {
                word+=s[i];
            }
        }
        if(!word.empty())  //to add last word if any
        {
            words_stack.push(word);
        }
        if(words_stack.top()==" ")//to pop last " "
        {
            words_stack.pop(); 
        }
        string rev_sen;
        // forming reverse sentence from words in the stack
        while(!words_stack.empty())
        {
             rev_sen+=words_stack.top();
             words_stack.pop();
        }

        return rev_sen;

    }
};
