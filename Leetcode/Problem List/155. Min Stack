Question:

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the MinStack class:

MinStack() initializes the stack object.
void push(int val) pushes the element val onto the stack.
void pop() removes the element on the top of the stack.
int top() gets the top element of the stack.
int getMin() retrieves the minimum element in the stack.
You must implement a solution with O(1) time complexity for each function.

 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2
 

Constraints:

-231 <= val <= 231 - 1
Methods pop, top and getMin operations will always be called on non-empty stacks.
At most 3 * 104 calls will be made to push, pop, top, and getMin.




Solution:

class MinStack {

private:
    int capacity;
    int *arr;
    int next_idx;
    int min_idx;
public:
    MinStack() 
    {
        capacity=4;
        arr=new int[capacity];
        next_idx=0;
        min_idx=0;
    }
    
    // Function to add an element to the stack
    void push(int val) 
    {
        if(next_idx==capacity) 
        {
            int *new_arr=new int[2*capacity];
            for(int i=0;i<capacity;i++)
            {
                new_arr[i]=arr[i];
            }
            delete[] arr; // Deallocate memory of the old array.
            arr=new_arr;
            capacity=2*capacity;// Update the capacity to the new size.
        }
        arr[next_idx]=val;
        if(val<arr[min_idx])
        {
            min_idx=next_idx;
        }
        next_idx++;
        
    }
    
    // Function to remove the top element from the stack
    void pop() 
    {
        if(next_idx>0)
        {
            // If the element to be removed is the minimum element,
            // find the new minimum by iterating through the stack.
            if(next_idx-1==min_idx)
            {
                min_idx=0;
                for(int i=0;i<next_idx-1;i++)
                {
                    if(arr[i]<arr[min_idx])
                    {
                        min_idx=i;
                    }
                }
            }
            next_idx--; //removing top element
        }
    }
    
    // Function to return the top element of the stack.
    int top() 
    {
        if(next_idx>0) {return arr[next_idx-1];}
        throw std::runtime_error("Stack is empty.");
    }
    
    
    // Function to get the current minimum element in the stack.
    int getMin() 
    {
        if(next_idx>0) {return arr[min_idx];}
        throw std::runtime_error("Stack is empty.");
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
