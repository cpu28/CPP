Question:

Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.

 

Example 1:

Input: nums = [1,2,3,1], k = 3
Output: true
Example 2:

Input: nums = [1,0,1,1], k = 1
Output: true
Example 3:

Input: nums = [1,2,3,1,2,3], k = 2
Output: false
 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109
0 <= k <= 105





Solution:

class Solution {
public:
    bool containsNearbyDuplicate(vector<int>& nums, int k) 
    {
        int n=nums.size();
        unordered_map<int, int> m;   //initialize unordered map

        for(int i=0;i<n;i++)
        {
            //if value is key i.e, nums[i] is not present in unordered map then insert;
            if(m.find(nums[i])==m.end()) 
            {
                m[nums[i]]=i;
            }

            //if its already present
            else
            {
                //check for condition, if its satisfies then return true
                if(abs(m[nums[i]]-i)<=k)
                {
                    return true;
                }
                //else update value 
                else
                {
                    m[nums[i]]=i;
                }
            }
        }

        return false;
    }
};
