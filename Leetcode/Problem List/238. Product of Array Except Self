Question:

Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
 

Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)





Solution:

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) 
    {
        vector<int> prod;
        vector<int> left_prod;
        vector<int> right_prod;
        int left=1;
        int right=1;
        int n=nums.size();
        left_prod.push_back(1); //for index '0'
        for(int i=1;i<n;i++)
        {
            left*=nums[i-1]; //multification till left
            left_prod.push_back(left); //must use push_back, don't use prod[i]
        }
        right_prod.push_back(1); //pushfront-> for index'n-1' 
        for(int i=n-1;i>0;i--)
        {
            right*=nums[i]; //multification till left
            right_prod.push_back(right);           
        }
        for(int i=0;i<n;i++)
        {
            prod.push_back(left_prod[i]*right_prod[n-1-i]); 
        }



        return prod;
        
    }
};
