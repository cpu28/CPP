question:
Given an m x n matrix, return all elements of the matrix in spiral order.

 

Example 1:


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:


Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100



solution:

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int sr = 0, sc = 0;
        int er = matrix.size() - 1, ec = matrix[0].size() - 1;
        vector<int> result;

        // Traverse the matrix in a spiral order
        while (sr <= er && sc <= ec) {
            // Print the start row
            for (int i = sc; i <= ec; i++) {
                result.push_back(matrix[sr][i]);
            }
            sr++;

            // Print the end column
            for (int i = sr; i <= er; i++) {
                result.push_back(matrix[i][ec]);
            }
            ec--;

            // Check if there are remaining rows and print the end row
            if (sr <= er) {
                for (int i = ec; i >= sc; i--) {
                    result.push_back(matrix[er][i]);
                }
                er--;
            }

            // Check if there are remaining columns and print the start column
            if (sc <= ec) {
                for (int i = er; i >= sr; i--) {
                    result.push_back(matrix[i][sc]);
                }
                sc++;
            }
        }

        return result;
    }
};
